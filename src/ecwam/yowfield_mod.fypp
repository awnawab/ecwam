#! (C) Copyright 2022- ECMWF.
#!
#! This software is licensed under the terms of the Apache Licence Version 2.0
#! which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
#! In applying this licence, ECMWF does not waive the privileges and immunities
#! granted to it by virtue of its status as an intergovernmental organisation
#! nor does it submit to any jurisdiction.
#!
#!
#:set f = io.open(os.path.dirname(_THIS_FILE_)+'/yowfield_mod_config.yaml', 'r')
#:set input = yaml.safe_load(f)
#:set objtypes = input['objtypes']
#:set objdef = input['objdef']
#!
#!
MODULE YOWFIELD_MOD

   USE PARKIND_WAVE, ONLY : JWRB, JWIM
   USE FIELD_MODULE, ONLY : FIELD_3D_WRAPPER, FIELD_3D, FIELD_INT2D, FIELD_INT2D_WRAPPER, FIELD_2D, FIELD_2D_WRAPPER, &
 &                          FIELD_INT3D, FIELD_INT3D_WRAPPER, FIELD_4D, FIELD_4D_WRAPPER, FIELD_INT4D, FIELD_INT4D_WRAPPER
   IMPLICIT NONE

#:for obj in objtypes
   TYPE ${obj.upper()}$_FIELD
#if !defined(WAM_PHYS_GPU) || !defined(WAM_CUDA)
   #:for var, type, dim in objdef[obj]
          #{if type == 'real'}#REAL(KIND=JWRB)#{else}#INTEGER(KIND=JWIM)#{endif}#, DIMENSION(${','.join(':' for _ in range(dim-1))}$), POINTER :: ${var.upper()}$=>NULL()
   #:endfor
#endif
   #:for var, type, dim in objdef[obj]
          CLASS(FIELD_#{if type == 'int'}#INT#{endif}#${dim}$D), POINTER :: F_${var.upper()}$=>NULL()
   #:endfor
      CONTAINS
         PROCEDURE :: INIT => ${obj.upper()}$_FIELD_INIT
#if defined(WAM_PHYS_GPU) || defined(WAM_CUDA)
         PROCEDURE :: UPDATE_DEVICE => ${obj.upper()}$_UPDATE_DEVICE
         PROCEDURE :: ENSURE_HOST => ${obj.upper()}$_ENSURE_HOST
#else
         PROCEDURE :: UPDATE_VIEW => ${obj.upper()}$_UPDATE_VIEW
#endif
   END TYPE ${obj.upper()}$_FIELD

#:endfor
   CONTAINS
#:for type in ['real', 'int']
   #:for dim in range(2, 5)
      FUNCTION WRAP_${dim}$D_${type.upper()}$_FIELD(ARR) RESULT(FIELD)
        #{if type == 'real'}#REAL(KIND=JWRB)#{else}#INTEGER(KIND=JWIM)#{endif}#, DIMENSION(${','.join(':' for _ in range(dim))}$), INTENT(IN) :: ARR
         CLASS(FIELD_#{if type == 'int'}#INT#{endif}#${dim}$D_WRAPPER), POINTER :: FIELD

         ALLOCATE(FIELD)
         CALL FIELD%INIT(ARR)
      END FUNCTION WRAP_${dim}$D_${type.upper()}$_FIELD

   #:endfor
#:endfor
#:for obj in objtypes
      SUBROUTINE ${obj.upper()}$_FIELD_INIT(SELF, ${', '.join(var[0].upper() for var in objdef[obj])}$)
          CLASS(${obj.upper()}$_FIELD), INTENT(INOUT) :: SELF
      #:for var, type, dim in objdef[obj]
          #{if type == 'real'}#REAL(KIND=JWRB)#{else}#INTEGER(KIND=JWIM)#{endif}#, DIMENSION(${','.join(':' for _ in range(dim))}$), INTENT(IN), OPTIONAL :: ${var.upper()}$
      #:endfor

      #:for var, type, dim in objdef[obj]
          IF(PRESENT(${var.upper()}$)) SELF%F_${var.upper()}$ => WRAP_${dim}$D_${type.upper()}$_FIELD(${var.upper()}$)
      #:endfor
      END SUBROUTINE ${obj.upper()}$_FIELD_INIT
  
#if defined(WAM_PHYS_GPU) || defined(WAM_CUDA)
      SUBROUTINE ${obj.upper()}$_UPDATE_DEVICE(SELF, ${', '.join(var[0].upper() for var in objdef[obj])}$)
          CLASS(${obj.upper()}$_FIELD), INTENT(INOUT) :: SELF
      #:for var, type, dim in objdef[obj]
          #{if type == 'real'}#REAL(KIND=JWRB)#{else}#INTEGER(KIND=JWIM)#{endif}#, DIMENSION(${','.join(':' for _ in range(dim))}$), INTENT(OUT), POINTER, CONTIGUOUS, OPTIONAL :: ${var.upper()}$
      #:endfor

      #:for var, type, dim in objdef[obj]
          IF(PRESENT(${var.upper()}$)) CALL SELF%F_${var.upper()}$%GET_DEVICE_DATA_RDWR(${var.upper()}$)
      #:endfor
      END SUBROUTINE ${obj.upper()}$_UPDATE_DEVICE

      SUBROUTINE ${obj.upper()}$_ENSURE_HOST(SELF)
          CLASS(${obj.upper()}$_FIELD), INTENT(INOUT) :: SELF

      #:for var, type, dim in objdef[obj]
          IF(ASSOCIATED(SELF%F_${var.upper()}$)) CALL SELF%F_${var.upper()}$%ENSURE_HOST()
      #:endfor
      END SUBROUTINE ${obj.upper()}$_ENSURE_HOST
#else
      SUBROUTINE ${obj.upper()}$_UPDATE_VIEW(SELF, BLOCK_INDEX)
          CLASS(${obj.upper()}$_FIELD), INTENT(INOUT) :: SELF
          INTEGER(KIND=JWIM), INTENT(IN) :: BLOCK_INDEX

      #:for var, type, dim in objdef[obj]
          IF(ASSOCIATED(SELF%F_${var.upper()}$)) SELF%${var.upper()}$ => SELF%F_${var.upper()}$%GET_VIEW(BLOCK_INDEX)
      #:endfor
      END SUBROUTINE ${obj.upper()}$_UPDATE_VIEW
#endif

#:endfor
END MODULE YOWFIELD_MOD
#:mute
$:f.close()
#:endmute
